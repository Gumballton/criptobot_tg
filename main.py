import logging
from aiogram import executor
from aiogram import Bot, Dispatcher, types
import requests
from datetime import datetime
import markups as nav
from config import TOKEN

logging.basicConfig(level=logging.INFO)


bot = Bot(token=TOKEN)

dp = Dispatcher(bot)
msg = ''
birja = requests.get('https://www.cbr-xml-daily.ru/daily_json.js').json()
ls_names = birja['Valute'].keys()
lsq = []
for i in ls_names:
    #lsq.append([birja['Valute'][i]['CharCode'], birja['Valute'][i]['Name'], birja['Valute'][i]['Value']])
	lsq.append(f"{'/'+birja['Valute'][i]['CharCode']} - {birja['Valute'][i]['Name']}")
print(lsq)

url = 'https://api.bybit.com/v2/public/tickers'
response = requests.get(url)
data = response.json()
ls = ['/'+data['result'][i]['symbol'][:-4] for i in range(305)]
print(ls)
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
	await bot.send_message(message.from_user.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–Ø - –±–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç/–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç!", reply_markup=nav.mainq)

	
@dp.message_handler(content_types = 'text')
async def bot_message(message: types.Message):
	async def get_price(m):
				try:
					url = 'https://api.bybit.com/v2/public/tickers'
					if m[0] == '/':
						m = m[1:]
					params = {'symbol': m.upper()+'USDT'}
					response = requests.get(url, params=params)
					data = response.json()
					return float(data['result'][0]['last_price'])
				except:
					return '–ù–µ–≤–µ—Ä–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞'
				
	async def get_price_val(m):
				try:
					birja = requests.get('https://www.cbr-xml-daily.ru/daily_json.js').json()
					ls_names = birja['Valute']
					if m[0] == '/':
						m = m[1:]
					if m in ['–î–æ–ª–ª–∞—Ä(usd)','–ï–≤—Ä–æ(eur)','–Æ–∞–Ω—å(cny)']:
						m = m.split('(')[1][:-1].upper()
					return f"{ls_names[m]['Name']} —Å—Ç–æ–∏—Ç {ls_names[m]['Value']}"
				except:
					return '–ù–µ–≤–µ—Ä–Ω–∞—è –≤–∞–ª—é—Ç–∞'
	
	if message.chat.type == 'private':
		global msg
		if message.text == 'üìà –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´':
			await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:', reply_markup=nav.criptoList)
			msg = message.text


		if message.text == '–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ':
			await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É/–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:', reply_markup=nav.mainq)
		

		if message.text == 'üìà –í–ê–õ–Æ–¢–´':
			await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É', reply_markup=nav.valuelist)
			msg = message.text

		if message.text == '–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç':
			await bot.send_message(message.from_user.id, ls)

		if message.text == '–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç':
			await bot.send_message(message.from_user.id, lsq)

		if message.text not in ['üìà –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´', '–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ', 'üìà –í–ê–õ–Æ–¢–´', '–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç', '–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç']:
			print(message.text, msg)
			if msg == 'üìà –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´' or await get_price_val(message.text) == '–ù–µ–≤–µ—Ä–Ω–∞—è –≤–∞–ª—é—Ç–∞':
				res = await get_price(message.text)
				if res == '–ù–µ–≤–µ—Ä–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞':
					await bot.send_message(message.from_user.id, '–ù–µ–≤–µ—Ä–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞')
				else:
					await bot.send_message(message.from_user.id, f'–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ {message.text.upper()} —Å—Ç–æ–∏—Ç - ${await get_price(message.text)}')
			if msg == 'üìà –í–ê–õ–Æ–¢–´' or await get_price(message.text) == '–ù–µ–≤–µ—Ä–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞':
				res = await get_price_val(message.text)
				if res == '–ù–µ–≤–µ—Ä–Ω–∞—è –≤–∞–ª—é—Ç–∞':
					await bot.send_message(message.from_user.id, '–ù–µ–≤–µ—Ä–Ω–∞—è –≤–∞–ª—é—Ç–∞')
				else:
					await bot.send_message(message.from_user.id, res)
		
	else:
		bot.send_message(message.from_user.id, '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é(((')


if __name__ == '__main__':
	executor.start_polling(dp, skip_updates = True)
